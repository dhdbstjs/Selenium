# 라이브러리 = 모듈
# 웹페이지 UI 자동화가 이 수업의 목적


# <<<< selenium에서 자주 나오는 오류 >>>>
# 웹 드라이버 설정이 잘못되었을 경우
# 요소가 없을 경우




# 각각의 모듈들이 모여서 하나의 실행 가능한 코드인 라이브러리, 패키지가 완성
# 모듈, 라이브러리, 패키지 차이 https://aliencoder.tistory.com/20
# 라이브러리 : 여러 패키지와 모듈들을 모아놓은 것
# 패키지 : 특정 기능과 관련된 여러 모듈을 한 폴더 안에 모아놓은 것
# 모듈 : 함수, 변수, 클래스를 모아놓은 것
# 라이브러리 >= 패키지 >= 모듈


# 모듈을 사용하는 이유? 이미 누군가 만들어놓은 코드를 내 코드로 가져와서 쓸 수 있기 때문에! 즉, 기능을 가져와서 사용이 가능하기때문에

# selenium도 모듈임 이게 없었다면, 웹 페이지 로드 등등 기능을 내가 하나하나 다 짰어야하지만 이 복잡한 기능들이 모듈로 되어있기 때문에 가져와서 간편하게 사용 가능하다

# 내장 모듈: 파이썬에 통합되어있는 기본적 모듈 import 명령어로 바로 사용 가능함
# 외장 모듈: 기본으로 제공되지 않는 모듈. 때문에 pip install로 설치한 후에 import 문으로 사용 가능함



# 시간 스탬프 찍는 기능 간단하지만 실무에서 많이 사용됨

import time

now_stamp = time.time()
now = time.strftime('%H:%M', time.localtime(now_stamp))
print(now)

# time 모듈의 time() 함수
# 함수는 독립적이기 때문에 객체뒤에 .으로 이어서 사용하지 않고 이름으로만 호출이 가능하지만 ex) print(), time()
# 메소드는 클래스 내에서 정의되기때문에 해당 클래스에 종속된다

# selenium에 implicitly_wait() -> 페이지 이동하거나 할 때 대기시키는 명령어
# 대기 안해주면 셀레니움은 코드를 쭉 진행하기만함!
# 만약 중간에 연산을 시켜놨는데 이 값이 계산되는 시간을 기다리지 않고 쭉 진행하면 에러가 발생할 확률이 높음!



# pip install 하는 법
# ctrl + shift 하면 터미널이 생성됨 안되면 그냥 위쪽 메뉴에서 terminal 눌러서 new terminal 선택
# 새로 뜬 터미널에 pip install 필요한모듈이름 입력 후 엔터 pip install selenium
# 맥버전에는 pip3 라고 써야함 왜? 맥은 파이썬이 이미 설치가 되어있음 근데 파이썬 2에 설치해야하는지 파이썬3에 설치해야하는지 모르니까 명시해줘야한다
# 셀레니움 4.x버전 이상일 경우는 웹브라우저를 따로 설치하지 않아도 된다! 오히려 설치하려고하면 에러뜸



# ******이 강의는 웹페이지에 대한 자동화 테스트를 진행할거기때문에 웹 페이지의 구조를 알아둬야한다
# ******* qa 포폴 만들 때 웹페이지 만들어보고 그걸로 테스트 진행 해보자!

# 웹 페이지가 모여 웹 사이트가 된다


## http https 차이점
# https://velog.io/@yejin20/Python-%ED%95%A8%EC%88%98%EC%99%80-%EB%A9%94%EC%86%8C%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90
# https://aws.amazon.com/ko/compare/the-difference-between-https-and-http/


# 개발자 도구 F11 을 사용하면 웹 페이지 구조를 보여주고 패킷 교환 상태도 볼 수 있다 api 요청 응답 등도 확인 가능!


# 자동화 테스트 시 기능별로 나누거나 시나리오별로 나눠서 테스트를 한다
# 시나리오란? 만약 유저가 접속해서 어떤 식으로 사용할것이다 를 가정해서 테스트
#  ex. 접속해서 로그인하고 메일 보낼것이다
# 웹페이지 테스트 할 때 이렇게 하고 API 테스트 할때도 이렇게 한다 기능별! 시나리오별!


# 완전 정확하게 내가 원하는 부분을 찾으려면 접혀있는 부분을 열어서 안의 안의 안쪽에 있을 수 있다
# 때문에 기본적인 개발된것의 구조를 알아야 쉽게 확인이 가능하다!
# 예를들어 span과 a 태그의 차이를 아는 것 처럼


# 셀레니움 굉장히 많이 사용되고있지만 최근에 playwright


# 웹드라이버 - 셀레니움으로 브라우저를 자동화할 때 사용하는 드라이버

# 예전에는 셀레니움으로 웹드라이버 관리할 때 크롬 버전 달라지면 다시 다운받고 해야했지만 지금 버전에서는 자동으로 해준다 (4.6.0 버전 이상 부터)


# from selenium import webdriver
# driver = webdriver.Chrome()
# 이 두 줄이 드라이버 설정임!


import time
# -> time 모듈 전체를 임포트 한다는 뜻
from selenium import webdriver
# -> 셀레니움이라는 모듈에서 webdriver 이라는 클래스 또는 함수를 임포트 한다
# 모듈에 기능이 너무 많을 때 내가 필요한 기능만 끌어쓸 때 이렇게 사용한다

driver = webdriver.Chrome()
# 크롬 웹드라이버를 driver 변수에 설정한다 이 객체를 가지고 우리가 웹브라우저를 컨트롤 하게된다

driver.maximize_window()
time.sleep(5)
# sleep 없으면 순삭이라 확인 어려울수도잇음

driver.minimize_window()
time.sleep(5)


# 모니터의 좌표 (0,0)은 왼쪽 위 모서리다! 정중앙이 아님! -> 오른쪽 아래로 갈수록 값이 커짐

driver.set_window_position(0, 0)
time.sleep(5)
# 좌표 설정해주면 그 좌표를 왼쪽 위 꼭지점으로 잡고 거기서부터 창이 켜진다
# 위치 설정은 언제 사용하나?

driver.set_window_size(500,500)
time.sleep(5)
# 사이즈변경은 언제 사용하나?

# 보통 위치설정과 사이즈 변경을 같이 사용하는 경우가 많다!
# 이 자동화 코드를 나 혼자 사용할경우는 걍 맥시마이저로 사용해도 상관없다 근데 내가 만든 코드를 다른 사람도 사용할 수 있는데
# 사용자 환경마다 모니터의 해상도가 다르고 설정이 다른데 내 모니터의 기준으로 맥시마이저 포인트를 잡아버리면 다른 동료가 열었을 때 오류가 생길수도 있기 떄문이다!
# 사용자 환경마다 모니터 갯수도 다르다 주 모니터, 서브모니터
# 셀레니움 사용하면 주모니터에 뜨게되는데 어떤 사람은 왼쪽이 주모니터고 어떤사람은 오른쪽일수도 있음
# 이것처럼 사람들마다 환경이 다르기떄문에 위치설정과 사이즈 변경을 설정한다

# selenium -> 객체 기반
# pyautogui -> 좌표 기반
# 각각의 장단점이 있기때문에 서로 보완하면서 사용하게된다
# 효율성을 높이기 위해서

# headless -> 크롬 브라우저 띄우지않고 실행하는 방식
# 때문에 포지션, 사이즈 설정 필요없다

# headed -> 브라우저 띄워서 실행하는 방식

driver.get('https://google.co.kr')
print(driver.title)
print(driver.current_url)
time.sleep(5)
# 어떤 주소로 이동할 때 get을 사용한다
# .title 을 사용하면 해당 페이지의 이름을 터미널에 출력한다
# 테스트 결과 기록할 떄 사용한다! 예를들어서 테스트 다 완료하면 그 다음에 title을 사용해서 어떤 페이지의 테스트를 완료했다 식으로 표시하기위해서
# print(driver.title)_(TC_TO)_fail 등등
# url 뽑아오는건 주로 실패 지점으로 바로 이동하기 위해서 그 지점을 따오기 위해 사용하는 경우!

# .back(), .forward() 는 실무에서 잘 사용 안한다

# .quit -> 자동화 테스트 다 끝나고 맨 마지막에 이거 써준다!